{"raw": "||2.9|3.0|3.1|\n|-----:|:-----:|:-----:|:-----:|\n|DEB| [CLI](/t/-/2608) ~ [UI](/t/-/2609)| [CLI](/t/-/3915) ~ [UI](/t/-/3916)| [CLI](/t/-/5115) ~ [UI](/t/-/5114)|\n|SNAP| [CLI](/t/-/2602) ~ [UI](/t/-/2603)| [CLI](/t/-/3913) ~ [UI](/t/-/3914)| [CLI](/t/-/5113) ~ [UI](/t/-/5112)|\n\nThe ultimate purpose of MAAS is to deploy and manage machines.  As explained in /t/about-machines/2734#heading--about-the-machine-life-cycle, machines must first be enlisted or commissioned, then acquired, then deployed.  This article will tell you:\n\n - [How to commission a machine](#heading--how-to-commission-a-machine)\n - [How to test machines](#heading--how-to-test-machines)\n - [How to acquire machines](#heading--acquire-machines)\n - [How to deploy machines](#heading--deploy)\n\n<a href=\"#heading--how-to-commission-a-machine\"><h2 id=\"heading--how-to-commission-a-machine\">How to commission a machine</h2></a>\n\n\nTo commission a machine that's in the \"Ready\" state, via the CLI, use the following command:\n\n```nohighlight\nmaas $PROFILE machine commission $SYSTEM_ID\n```\n<details><summary>Typical JSON output (long listing)</summary>\n\n```nohighlight\nSuccess.\nMachine-readable output follows:\n{\n    \"storage_test_status_name\": \"Pending\",\n    \"bcaches\": [],\n    \"cpu_count\": 1,\n    \"interface_set\": [\n        {\n            \"params\": \"\",\n            \"numa_node\": 0,\n            \"tags\": [],\n            \"id\": 10,\n            \"mac_address\": \"52:54:00:15:36:f2\",\n            \"vendor\": \"Red Hat, Inc.\",\n            \"children\": [],\n            \"effective_mtu\": 1500,\n            \"discovered\": [],\n            \"links\": [],\n            \"link_speed\": 0,\n            \"link_connected\": true,\n            \"system_id\": \"bhxws3\",\n            \"enabled\": true,\n            \"interface_speed\": 0,\n            \"firmware_version\": null,\n            \"name\": \"ens3\",\n            \"sriov_max_vf\": 0,\n            \"product\": null,\n            \"vlan\": {\n                \"vid\": 0,\n                \"mtu\": 1500,\n                \"dhcp_on\": true,\n                \"external_dhcp\": null,\n                \"relay_vlan\": null,\n                \"fabric\": \"fabric-2\",\n                \"primary_rack\": \"8dwnne\",\n                \"name\": \"untagged\",\n                \"id\": 5003,\n                \"space\": \"undefined\",\n                \"secondary_rack\": null,\n                \"fabric_id\": 2,\n                \"resource_uri\": \"/MAAS/api/2.0/vlans/5003/\"\n            },\n            \"parents\": [],\n            \"type\": \"physical\",\n            \"resource_uri\": \"/MAAS/api/2.0/nodes/bhxws3/interfaces/10/\"\n        }\n    ],\n    \"network_test_status_name\": \"Unknown\",\n    \"numanode_set\": [\n        {\n            \"index\": 0,\n            \"memory\": 985,\n            \"cores\": [\n                0\n            ]\n        }\n    ],\n    \"locked\": false,\n    \"hardware_uuid\": \"F677A842-571C-4E65-ADC9-11E2CF92D363\",\n    \"default_gateways\": {\n        \"ipv4\": {\n            \"gateway_ip\": null,\n            \"link_id\": null\n        },\n        \"ipv6\": {\n            \"gateway_ip\": null,\n            \"link_id\": null\n        }\n    },\n    \"status_action\": \"\",\n    \"status_message\": \"Commissioning\",\n    \"cpu_test_status_name\": \"Unknown\",\n    \"memory_test_status\": -1,\n    \"virtualblockdevice_set\": [],\n    \"pool\": {\n        \"name\": \"default\",\n        \"description\": \"Default pool\",\n        \"id\": 0,\n        \"resource_uri\": \"/MAAS/api/2.0/resourcepool/0/\"\n    },\n    \"current_testing_result_id\": 9,\n    \"current_installation_result_id\": null,\n    \"netboot\": true,\n    \"description\": \"\",\n    \"special_filesystems\": [],\n    \"testing_status\": 0,\n    \"memory\": 1024,\n    \"current_commissioning_result_id\": 8,\n    \"storage\": 5368.70912,\n    \"commissioning_status\": 0,\n    \"cpu_test_status\": -1,\n    \"tag_names\": [\n        \"virtual\"\n    ],\n    \"memory_test_status_name\": \"Unknown\",\n    \"swap_size\": null,\n    \"status_name\": \"Commissioning\",\n    \"other_test_status\": -1,\n    \"pod\": null,\n    \"storage_test_status\": 0,\n    \"blockdevice_set\": [\n        {\n            \"id_path\": \"/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001\",\n            \"size\": 5368709120,\n            \"block_size\": 512,\n            \"tags\": [\n                \"ssd\"\n            ],\n            \"serial\": \"QM00001\",\n            \"uuid\": null,\n            \"numa_node\": 0,\n            \"available_size\": 5368709120,\n            \"id\": 3,\n            \"partition_table_type\": null,\n            \"model\": \"QEMU HARDDISK\",\n            \"path\": \"/dev/disk/by-dname/sda\",\n            \"storage_pool\": null,\n            \"used_for\": \"Unused\",\n            \"filesystem\": null,\n            \"system_id\": \"bhxws3\",\n            \"used_size\": 0,\n            \"partitions\": [],\n            \"name\": \"sda\",\n            \"type\": \"physical\",\n            \"resource_uri\": \"/MAAS/api/2.0/nodes/bhxws3/blockdevices/3/\"\n        }\n    ],\n    \"other_test_status_name\": \"Unknown\",\n    \"distro_series\": \"\",\n    \"testing_status_name\": \"Pending\",\n    \"ip_addresses\": [],\n    \"address_ttl\": null,\n    \"system_id\": \"bhxws3\",\n    \"physicalblockdevice_set\": [\n        {\n            \"firmware_version\": \"2.5+\",\n            \"serial\": \"QM00001\",\n            \"uuid\": null,\n            \"numa_node\": 0,\n            \"available_size\": 5368709120,\n            \"size\": 5368709120,\n            \"tags\": [\n                \"ssd\"\n            ],\n            \"id\": 3,\n            \"partition_table_type\": null,\n            \"id_path\": \"/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001\",\n            \"model\": \"QEMU HARDDISK\",\n            \"path\": \"/dev/disk/by-dname/sda\",\n            \"storage_pool\": null,\n            \"used_for\": \"Unused\",\n            \"filesystem\": null,\n            \"system_id\": \"bhxws3\",\n            \"used_size\": 0,\n            \"partitions\": [],\n            \"name\": \"sda\",\n            \"block_size\": 512,\n            \"type\": \"physical\",\n            \"resource_uri\": \"/MAAS/api/2.0/nodes/bhxws3/blockdevices/3/\"\n        }\n    ],\n    \"fqdn\": \"ace-swan.maas\",\n    \"osystem\": \"\",\n    \"domain\": {\n        \"authoritative\": true,\n        \"ttl\": null,\n        \"resource_record_count\": 0,\n        \"name\": \"maas\",\n        \"id\": 0,\n        \"is_default\": true,\n        \"resource_uri\": \"/MAAS/api/2.0/domains/0/\"\n    },\n    \"boot_interface\": {\n        \"params\": \"\",\n        \"numa_node\": 0,\n        \"tags\": [],\n        \"id\": 10,\n        \"mac_address\": \"52:54:00:15:36:f2\",\n        \"vendor\": \"Red Hat, Inc.\",\n        \"children\": [],\n        \"effective_mtu\": 1500,\n        \"discovered\": [],\n        \"links\": [],\n        \"link_speed\": 0,\n        \"link_connected\": true,\n        \"system_id\": \"bhxws3\",\n        \"enabled\": true,\n        \"interface_speed\": 0,\n        \"firmware_version\": null,\n        \"name\": \"ens3\",\n        \"sriov_max_vf\": 0,\n        \"product\": null,\n        \"vlan\": {\n            \"vid\": 0,\n            \"mtu\": 1500,\n            \"dhcp_on\": true,\n            \"external_dhcp\": null,\n            \"relay_vlan\": null,\n            \"fabric\": \"fabric-2\",\n            \"primary_rack\": \"8dwnne\",\n            \"name\": \"untagged\",\n            \"id\": 5003,\n            \"space\": \"undefined\",\n            \"secondary_rack\": null,\n            \"fabric_id\": 2,\n            \"resource_uri\": \"/MAAS/api/2.0/vlans/5003/\"\n        },\n        \"parents\": [],\n        \"type\": \"physical\",\n        \"resource_uri\": \"/MAAS/api/2.0/nodes/bhxws3/interfaces/10/\"\n    },\n    \"hostname\": \"ace-swan\",\n    \"network_test_status\": -1,\n    \"min_hwe_kernel\": \"\",\n    \"power_state\": \"off\",\n    \"interface_test_status_name\": \"Unknown\",\n    \"owner_data\": {},\n    \"volume_groups\": [],\n    \"power_type\": \"virsh\",\n    \"node_type\": 0,\n    \"owner\": \"admin\",\n    \"cache_sets\": [],\n    \"architecture\": \"amd64/generic\",\n    \"hwe_kernel\": null,\n    \"zone\": {\n        \"name\": \"default\",\n        \"description\": \"\",\n        \"id\": 1,\n        \"resource_uri\": \"/MAAS/api/2.0/zones/default/\"\n    },\n    \"disable_ipv4\": false,\n    \"boot_disk\": {\n        \"firmware_version\": \"2.5+\",\n        \"serial\": \"QM00001\",\n        \"uuid\": null,\n        \"numa_node\": 0,\n        \"available_size\": 5368709120,\n        \"size\": 5368709120,\n        \"tags\": [\n            \"ssd\"\n        ],\n        \"id\": 3,\n        \"partition_table_type\": null,\n        \"id_path\": \"/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001\",\n        \"model\": \"QEMU HARDDISK\",\n        \"path\": \"/dev/disk/by-dname/sda\",\n        \"storage_pool\": null,\n        \"used_for\": \"Unused\",\n        \"filesystem\": null,\n        \"system_id\": \"bhxws3\",\n        \"used_size\": 0,\n        \"partitions\": [],\n        \"name\": \"sda\",\n        \"block_size\": 512,\n        \"type\": \"physical\",\n        \"resource_uri\": \"/MAAS/api/2.0/nodes/bhxws3/blockdevices/3/\"\n    },\n    \"status\": 1,\n    \"iscsiblockdevice_set\": [],\n    \"raids\": [],\n    \"node_type_name\": \"Machine\",\n    \"hardware_info\": {\n        \"system_vendor\": \"QEMU\",\n        \"system_product\": \"Standard PC (i440FX + PIIX, 1996)\",\n        \"system_family\": \"Unknown\",\n        \"system_version\": \"pc-i440fx-focal\",\n        \"system_sku\": \"Unknown\",\n        \"system_serial\": \"Unknown\",\n        \"cpu_model\": \"Intel Core Processor (Skylake, IBRS)\",\n        \"mainboard_vendor\": \"Unknown\",\n        \"mainboard_product\": \"Unknown\",\n        \"mainboard_serial\": \"Unknown\",\n        \"mainboard_version\": \"Unknown\",\n        \"mainboard_firmware_vendor\": \"SeaBIOS\",\n        \"mainboard_firmware_date\": \"04/01/2014\",\n        \"mainboard_firmware_version\": \"1.13.0-1ubuntu1\",\n        \"chassis_vendor\": \"QEMU\",\n        \"chassis_type\": \"Other\",\n        \"chassis_serial\": \"Unknown\",\n        \"chassis_version\": \"pc-i440fx-focal\"\n    },\n    \"commissioning_status_name\": \"Pending\",\n    \"bios_boot_method\": \"pxe\",\n    \"interface_test_status\": -1,\n    \"cpu_speed\": 0,\n    \"resource_uri\": \"/MAAS/api/2.0/machines/bhxws3/\"\n}\n```\n\n</details>\n\nIf you need to find the machine's $SYSTEM_ID, you can use a command like this one:\n\n```nohighlight\nmaas $PROFILE machines read | jq '.[] | .hostname, .system_id'\n\"ace-swan\"\n\"bhxws3\"\n```\n\nOnce commissioned, you may consider [creating or applying a tag](/t/maas-tags/2896) to this machine.  The next step is [deployment](/t/how-to-deploy-machines/2602).\n\n<a href=\"#heading--how-to-test-machines\"><h2 id=\"heading--how-to-test-machines\">How to test machines</h2></a>\n\nThis section explains:\n\n* [How to download built-in scripts](#heading--how-to-download-built-in-scripts)\n* [How to upload hardware testing scripts](#heading--how-to-upload-hardware-testing-scripts)\n* [How to list all uploaded hardware testing scripts](#heading--how-to-list-all-uploaded-hardware-testing-scripts)\n* [How to update hardware testing scripts](#heading--how-to-update-hardware-testing-scripts)\n* [How to revert hardware testing scripts](#heading--how-to-revert-hardware-testing-scripts)\n* [How to download a script](#heading--how-to-download-a-script)\n* [How to view script results](#heading--how-to-view-script-results)\n* [How to filter script results](#heading--how-to-filter-script-results)\n* [How to suppress failed results](#heading--how-to-suppress-failed-results)\n* [How to locate script files](#heading--how-to-locate-script-files)\n* [How to locate log files](#heading--how-to-locate-log-files)\n* [How to run all scripts manually](#heading--how-to-run-all-scripts-manually)\n\nYou can also refer to technical details and examples for [commissioning scripts](/t/commissioning-scripts-reference/5380) and [testing scripts](/t/hardware-test-scripts-reference/5387) as needed.\n\n<a href=\"#heading--how-to-download-built-in-scripts\"><h3 id=\"heading--how-to-download-built-in-scripts\">How to download built-in scripts</h3></a>\n\nYou can download the source for all commissioning and test scripts via the API with the following command:\n\n``` nohighlight\nmaas $PROFILE node-script download $SCRIPT_NAME\n```\n\nThe source code to all built-in scripts is available on [launchpad](https://git.launchpad.net/maas/tree/src/metadataserver/builtin_scripts) ![external-link-icon|15x15](upload://AsoQHBzEFT6NuSK3ZYyhp7S6BMi.png).\n\n<a href=\"#heading--how-to-upload-hardware-testing-scripts\"><h3 id=\"heading--how-to-upload-hardware-testing-scripts\">How to upload hardware testing scripts</h3></a>\n\nTo upload a hardware testing script to MAAS, enter the following:\n\n```nohighlight\nmaas $PROFILE node-scripts create name=$SCRIPT_NAME name> \\\n script=$PATH_TO_SCRIPT type=testing\n```\n\nChanging the type to commissioning adds the test script to the commissioning process.\n\n<a href=\"#heading--how-to-list-all-uploaded-hardware-testing-scripts\"><h3 id=\"heading--how-to-list-all-uploaded-hardware-testing-scripts\">How to list all uploaded hardware testing scripts</h3></a>\n\nYou can list all uploaded scripts with the following command:\n\n```nohighlight\nmaas $PROFILE node-scripts read type=testing filters=$TAG\n```\n\nThe optional filters argument lets you search for tags assigned to a script, such as using `TAG=cpu` with the above example.\n\n<a href=\"#heading--how-to-update-hardware-testing-scripts\"><h3 id=\"heading--how-to-update-hardware-testing-scripts\">How to update hardware testing scripts</h3></a>\n\nA script's metadata, and even the script itself, can be updated from the command line:\n\n```nohighlight\nmaas $PROFILE node-script update \\\n $SCRIPT_NAME script=$PATH_TO_SCRIPT comment=$COMMENT\n```\n\nThe JSON formatted output to the above command will include 'history' dictionary entries, detailing script modification times and associated comments:\n\n```nohighlight\n\"history\": [\n    {\n        \"id\": 40,\n        \"created\": \"Tue, 12 Sep 2017 12:12:08 -0000\",\n        \"comment\": \"Updated version\"\n    },\n    {\n        \"id\": 34,\n        \"created\": \"Fri, 08 Sep 2017 17:07:46 -0000\",\n        \"comment\": null\n    }\n]\n```\n\n<a href=\"#heading--how-to-revert-hardware-testing-scripts\"><h3 id=\"heading--how-to-revert-hardware-testing-scripts\">How to revert hardware testing scripts</h3></a>\n\nMAAS keeps a history of all uploaded script versions, allowing you to easily revert to a previous version, using the `id` of the desired version:\n\n```nohighlight\nmaas $PROFILE node-script revert $SCRIPT_NAME to=$VERSION_ID\n```\n\n[note type=\"negative\" status=\"Warning\"]\nThe history for later modifications will be lost when reverting to an earlier version of the script.\n[/note]\n\n<a href=\"#heading--how-to-download-a-script\"><h3 id=\"heading--how-to-download-a-script\">How to download a script</h3></a>\n\nTo download a script, enter the following:\n\n```nohighlight\nmaas $PROFILE node-script download $SCRIPT_NAME > $LOCAL_FILENAME\n```\n<a href=\"#heading--how-to-delete-a-script\"><h3 id=\"heading--how-to-delete-a-script\">How to delete a script</h3></a>\n\nTo delete a script, use `delete`:\n\n```nohighlight\nmaas $PROFILE node-script delete $SCRIPT_NAME\n```\n\n<a href=\"#heading--how-to-view-script-results\"><h3 id=\"heading--how-to-view-script-results\">How to view script results</h3></a>\n\nThe command line allows you to not only view the current script's progress but also retrieve the verbatim output from any previous runs too.\n\nIf you only want to see the latest or currently-running result, you can use `current-commissioning`, `current-testing`, or `current-installation` instead of an id:\n\n```nohighlight\nmaas $PROFILE node-script-result read $SYSTEM_ID $RESULTS\n```\n<a href=\"#heading--how-to-filter-script-results\"><h4 id=\"heading--how-to-filter-script-results\">How to filter script results</h4></a>\n\nYou can also limit which results are returned by type (commissioning, testing, or installation), script name, or script run:\n\n```nohighlight\nmaas $PROFILE node-script-results read \\\n $SYSTEM_ID type=$SCRIPT_TYPE filters=$SCRIPT_NAME,$TAGS\n```\n<a href=\"#heading--how-to-suppress-failed-results\"><h3 id=\"heading--how-to-suppress-failed-results\">How to suppress failed results</h3></a>\n\nYou can also suppress failed results, which is useful if you want to ignore a known failure:\n\n```nohighlight\nmaas $PROFILE node-script-results update \\\n $SYSTEM_ID type=$SCRIPT_TYPE filters=$SCRIPT_NAME,$TAGS suppressed=$SUPPRESSED\n```\n\nwhere `$SUPPRESSED` is either `True` or `False`. The JSON formatted output to the above command will include 'results' dictionary with an entry for `suppressed`:\n\n```nohighlight\n\"results\": [\n    {\n        \"id\": 21,\n        \"created\": \"Tue, 02 Apr 2019 17:00:36 -0000\",\n        \"updated\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"name\": \"smartctl-validate\",\n        \"status\": 5,\n        \"status_name\": \"Aborted\",\n        \"exit_status\": null,\n        \"started\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"ended\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"runtime\": \"0:00:00\",\n        \"starttime\": 1554238601.765214,\n        \"endtime\": 1554238601.765214,\n        \"estimated_runtime\": \"0:00:00\",\n        \"parameters\": {\n            \"storage\": {\n                \"argument_format\": \"{path}\",\n                \"type\": \"storage\",\n                \"value\": {\n                    \"id_path\": \"/dev/vda\",\n                    \"model\": \"\",\n                    \"name\": \"sda\",\n                    \"physical_blockdevice_id\": 1,\n                    \"serial\": \"\"\n                }\n            }\n        },\n        \"script_id\": 1,\n        \"script_revision_id\": null,\n        \"suppressed\": true\n    }\n]\n```\n\nFinally, results can be downloaded, either to stdout, stderr, as combined output or as a tar.xz:\n\n```nohighlight\nmaas $PROFILE node-script-result download $SYSTEM_ID $RUN_ID output=all \\\n filetype=tar.xz > $LOCAL_FILENAME\n```\n\n[note]\n**$RUN_ID** is labelled `id` in the verbose result output.\n[/note]\n\n\n\nAs long as you've added your [SSH key](/t/how-to-manage-user-accounts/3202#heading--ssh-keys) to MAAS, you can connect with SSH to the machine's IP with a username of `ubuntu`. Type `sudo -i` to get root access.\n\n<a href=\"#heading--how-to-locate-script-files\"><h3 id=\"heading--how-to-locate-script-files\">How to locate script files</h3></a>\n\nCommissioning and testing script files may be found in the following directories:\n\n1.   `/tmp/user_data.sh.*/scripts/commissioning/`: Commissioning scripts\n2.   `/tmp/user_data.sh.*/scripts/testing/`: Hardware testing scripts\n\n<a href=\"#heading--how-to-locate-log-files\"><h4 id=\"heading--how-to-locate-log-files\">How to locate log files</h4></a>\n\nCommissioning and testing log files may be found in the following directories:\n\n1.   `/tmp/user_data.sh*/out/`\n2.   `/var/log/cloud-init-output.log`\n3.   `/var/log/cloud-init.log`\n\n<a href=\"#heading--how-to-run-all-scripts-manually\"><h3 id=\"heading--how-to-run-all-scripts-manually\">How to run all scripts manually</h3></a>\n\nYou can also run all commissioning and hardware-testing scripts on a machine for debugging.\n\n```nohighlight\n/tmp/user_data.sh.*/bin/maas-run-remote-scripts \\\n    [--no-download] \\\n    [--no-send] \\\n    /tmp/user_data.sh.*\n```\n\nWhere:\n\n1.   `--no-download`: Optional. Do not download the scripts from MAAS again.\n2.   `--no-send`: Optional. Do not send the results to MAAS.\n\nFor example, to run all the scripts again without downloading again from MAAS:\n\n```nohighlight\n/tmp/user_data.sh.*/bin/maas-run-remote-scripts --no-download /tmp/user_data.sh.*\n```\n\nHere, all the scripts are run again after downloading from MAAS, but no output data is sent to MAAS:\n\n```nohighlight\n/tmp/user_data.sh.*/bin/maas-run-remote-scripts --no-send /tmp/user_data.sh.*\n```\n<a href=\"#heading--upload-test-scripts\"><h3 id=\"heading--upload-test-scripts\">How to upload hardware test scripts</h3></a>\n\nTo upload a hardware testing script to MAAS, enter the following:\n\n``` bash\nmaas $PROFILE node-scripts create name=$SCRIPT_NAME name> \\\n script=$PATH_TO_SCRIPT type=testing\n```\n\nChanging the type to commissioning adds the test script to the commissioning process.\n\nYou can list all uploaded scripts with the following command:\n\n``` bash\nmaas $PROFILE node-scripts read type=testing filters=$TAG\n```\n\nThe optional filters argument lets you search for tags assigned to a script, such as using `TAG=cpu` with the above example.\n\nA script's metadata, and even the script itself, can be updated from the command line:\n\n``` bash\nmaas $PROFILE node-script update \\\n $SCRIPT_NAME script=$PATH_TO_SCRIPT comment=$COMMENT\n```\n\nThe JSON formatted output to the above command will include 'history' dictionary entries, detailing script modification times and associated comments:\n\n``` json\n\"history\": [\n    {\n        \"id\": 40,\n        \"created\": \"Tue, 12 Sep 2017 12:12:08 -0000\",\n        \"comment\": \"Updated version\"\n    },\n    {\n        \"id\": 34,\n        \"created\": \"Fri, 08 Sep 2017 17:07:46 -0000\",\n        \"comment\": null\n    }\n]\n```\n\nMAAS keeps a history of all uploaded script versions, allowing you to easily revert to a previous version using the `id` of the version you wish to revert to:\n\n``` bash\nmaas $PROFILE node-script revert $SCRIPT_NAME to=$VERSION_ID\n```\n\n[note type=\"negative\" status=\"Warning\"]\nThe history for later modifications will be lost when reverting to an earlier version of the script.\n[/note]\n\nTo download a script, enter the following:\n\n``` bash\nmaas $PROFILE node-script download $SCRIPT_NAME > $LOCAL_FILENAME\n```\n\nTo delete a script, use `delete`:\n\n``` bash\nmaas $PROFILE node-script delete $SCRIPT_NAME\n```\n\n<a href=\"#heading--tags-group-scripts\"><h3 id=\"heading--tags-group-scripts\">How to use tags to group commissioning and testing scripts</h3></a>\n\nTags make scripts easier to manage; grouping scripts together for commissioning and testing, for example:\n\n``` bash\nmaas $PROFILE node-script add-tag $SCRIPT_NAME tag=$TAG\nmaas $PROFILE node-script remove-tag $SCRIPT_NAME tag=$TAG\n```\n\nMAAS runs all commissioning scripts by default. However, you can select which custom scripts to run during commissioning by name or tag:\n\n``` bash\nmaas $PROFILE machine commission \\\n commissioning_scripts=$SCRIPT_NAME,$SCRIPT_TAG\n```\n\nYou can also select which testing scripts to run by name or tag:\n\n``` bash\nmaas $PROFILE machine commission \\\n testing_scripts=$SCRIPT_NAME,$SCRIPT_TAG\n```\n\nAny testing scripts tagged with commissioning will also run during commissioning.\n\n<a href=\"#heading--results\"><h3 id=\"heading--results\">How to view testing results</h3></a>\n\nThe command line allows you to not only view the current script's progress but also retrieve the verbatim output from any previous runs too.\n\nIf you only want to see the latest or currently-running result, you can use `current-commissioning`, `current-testing`, or `current-installation` instead of an id:\n\n``` bash\nmaas $PROFILE node-script-result read $SYSTEM_ID $RESULTS\n```\n\nYou can also limit which results are returned by type (commissioning, testing, or installation), script name, or script run:\n\n``` bash\nmaas $PROFILE node-script-results read \\\n $SYSTEM_ID type=$SCRIPT_TYPE filters=$SCRIPT_NAME,$TAGS\n```\n\nYou can also suppress failed results, which is useful if you want to ignore a known failure:\n\n``` bash\nmaas $PROFILE node-script-results update \\\n $SYSTEM_ID type=$SCRIPT_TYPE filters=$SCRIPT_NAME,$TAGS suppressed=$SUPPRESSED\n```\n\nwhere `$SUPPRESSED` is either `True` or `False`. The JSON formatted output to the above command will include 'results' dictionary with an entry for `suppressed`:\n\n``` json\n\"results\": [\n    {\n        \"id\": 21,\n        \"created\": \"Tue, 02 Apr 2019 17:00:36 -0000\",\n        \"updated\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"name\": \"smartctl-validate\",\n        \"status\": 5,\n        \"status_name\": \"Aborted\",\n        \"exit_status\": null,\n        \"started\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"ended\": \"Tue, 02 Apr 2019 20:56:41 -0000\",\n        \"runtime\": \"0:00:00\",\n        \"starttime\": 1554238601.765214,\n        \"endtime\": 1554238601.765214,\n        \"estimated_runtime\": \"0:00:00\",\n        \"parameters\": {\n            \"storage\": {\n                \"argument_format\": \"{path}\",\n                \"type\": \"storage\",\n                \"value\": {\n                    \"id_path\": \"/dev/vda\",\n                    \"model\": \"\",\n                    \"name\": \"sda\",\n                    \"physical_blockdevice_id\": 1,\n                    \"serial\": \"\"\n                }\n            }\n        },\n        \"script_id\": 1,\n        \"script_revision_id\": null,\n        \"suppressed\": true\n    }\n]\n```\n\nFinally, results can be downloaded, either to stdout, stderr, as combined output or as a tar.xz:\n\n``` bash\nmaas $PROFILE node-script-result download $SYSTEM_ID $RUN_ID output=all \\\n filetype=tar.xz > $LOCAL_FILENAME\n```\n\n[note]\n**$RUN_ID** is labelled `id` in the verbose result output.\n[/note]\n\n\n\nSee [Commissioning Scripts Reference](/t/commissioning-scripts-reference/5380) for more details on how these scripts work and how you can write your own.\n\n<a href=\"#heading--network-link-testing\"><h2 id=\"heading--network-link-testing\">How to test network links</h2></a>\n\nMAAS can check whether links are connected or disconnected, so that you can detect unplugged cables.  If you are not running MAAS 2.7, you must first upgrade and then recommission your machines to find disconnected links.  MAAS not only reports unplugged cables, but also gives a warning when trying to configure a disconnected interface.  In addition, administrators can change the cable connection status after manually resolving the issue.\n\nTo check network testing results, enter the following command:\n\n```\nmaas $PROFILE interfaces read $SYSTEM_ID \\\n| jq -r '([\"LINK_NAME\",\"LINK_CONNECTED?\",\"LINK_SPEED\", \"I/F_SPEED\"]\n| (., map(length*\"-\"))), (.[] | [.name, .link_connected, .link_speed, .interface_speed])\n| @tsv' | column -t\n```\n\nwhich produces an output similar to this:\n\n```\nLINK_NAME  LINK_CONNECTED?  LINK_SPEED  I/F_SPEED\n---------  ---------------  ----------  ---------\nens3       false            -           1 Gpbs\n```\n\nFrom this screen, you can see that the `ens3` link is not connected (hence an unreported link speed). \n\n\nOnce you have manually repaired the broken connection, an administrator can change cable connection status:\n\n```\nmaas $PROFILE interface update $SYSTEM_ID $INTERFACE_ID link_connected=true\n```\n\n\n<a href=\"#heading--slow-link-detection\"><h2 id=\"heading--slow-link-detection\">How to detect slow network links</h2></a>\n\nAs servers and hardware get faster, the chances increase that you might encounter a speed mismatch when connecting your NIC to a network device.  MAAS can warn you if your interface is connected to a link slower than what the interface supports, when you run the above command:\n\n```\nmaas $PROFILE interfaces read $SYSTEM_ID \\\n| jq -r '([\"LINK_NAME\",\"LINK_CONNECTED?\",\"LINK_SPEED\", \"I/F_SPEED\"]\n| (., map(length*\"-\"))), (.[] | [.name, .link_connected, .link_speed, .interface_speed])\n| @tsv' | column -t\n```\n\nFrom the resulting output, you can detect when your link/interface speeds are slower than expected. Depending on your physical hardware, the problem may not be repairable, but once you identify a slow link, you can replace a slow switch without recommissioning.  \n\n\n\n\nAdministrators can change or update the link and interface speeds after manual changes\nto the connection:\n\n```\nmaas $PROFILE interface update $SYSTEM_ID $INTERFACE_ID link_speed=$NEW_LINK_SPEED \\\ninterface_speed=$NEW_INTERFACE_SPEED\n```\n\n\n<a href=\"#heading--network-validation-scripts-and-testing\"><h2 id=\"heading--network-validation-scripts-and-testing\">How to configure network validation and testing scripts</h2></a>\n\nMAAS allows you to configure network connectivity testing in a number of ways. If MAAS can\u2019t connect to the rack controller, deployment can\u2019t complete.  MAAS can check connectivity to the rack controller and warn you if there\u2019s no link, long before you have to try and debug it. For example, if you can\u2019t connect to your gateway controller, traffic can\u2019t leave your network. \n\n\nUsers can now test their network configuration to check for:\n\n1. Interfaces which have a broken network configuration\n2. Bonds that are not fully operational\n3. Broken gateways, rack controllers, and Internet links\n\nIn addition, MAAS can comprehensively test Internet connectivity testing. You can give a list of URLs or IP addresses to check:\n\n<a href=\"https://discourse.maas.io/uploads/default/original/1X/b92a8ca1821bc1ccf60cf7fddcb57f3fbeda4408.jpeg\" target = \"_blank\"><img src=\"https://discourse.maas.io/uploads/default/original/1X/b92a8ca1821bc1ccf60cf7fddcb57f3fbeda4408.jpeg\"></a> \n\n\nIn the ephemeral environment, standard DHCP is still applied, but when network testing runs, MAAS can apply your specific configuration for the duration of the test.  While all URLs / IPs are tested with all interfaces, MAAS can test each of your interfaces individually, including breaking apart bonded NICS and testing each side of your redundant interfaces. You can also run different tests on each pass, e.g., a different set of URLs, although each run would be a different testing cycle.\n\nTo test individual interfaces, for example, you could issue the following command:\n\n<a href=\"https://discourse.maas.io/uploads/default/original/1X/7fadb56a2939f7a781510a55813141de03521e0d.jpeg\" target = \"_blank\"><img src=\"https://discourse.maas.io/uploads/default/original/1X/7fadb56a2939f7a781510a55813141de03521e0d.jpeg\"></a> \n\nNote that in this command, we are testing internet connectivity to the single interface \"br0.\"\n\n<a href=\"#heading--customisable-network-testing\"><h2 id=\"heading--customisable-network-testing\">How to customise network testing</h2></a>\n\nMAAS allow you to customise network testing according to your needs.  You can create your own commissioning scripts and tests related to networking, and you can run them during the network testing portion of the MAAS workflow.\n\n\nThere are no particular restrictions on these scripts, so you can test a wide variety of possible conditions and situations.  Administrators can upload network tests and test scripts.  Administrators can also create tests which accept an interface parameter, or scripts which apply custom network configurations.  \n\nUsers can specify unique parameters using the API, override machines which fail network testing (allowing their use), and suppress individual failed network tests.  Users can also review the health status from all interface tests, even sorting them by interface name and MAC.  In addition, MAAS can report the overall status of all interfaces.\n\n<a href=\"#heading--acquire-machines\"><h2 id=\"heading--acquire-machines\">How to acquire machines</h2></a>\n\n\n\nTo acquire/allocate a random node:\n\n``` bash\nmaas $PROFILE machines allocate\n```\n\nTo acquire/allocate a specific node:\n\n``` bash\nmaas $PROFILE machines allocate system_id=$SYSTEM_ID\n```\n\n\n[note]\nTo acquire a node, it must have a status of 'Ready'.\n[/note]\n\n<a href=\"#heading--deploy\"><h2 id=\"heading--deploy\">How to deploy machines</h2></a>\n\n\nTo deploy a node:\n\n``` bash\nmaas $PROFILE machine deploy $SYSTEM_ID\n```\n\nTo deploy a node as a KVM host:\n\n``` bash\nmaas $PROFILE machine deploy $SYSTEM_ID install_kvm=True\n```\n\n[note]\nTo deploy with the CLI, the node must have a status of 'Allocated'. See 'Acquire a node' above.\n[/note]\n\n<a href=\"#heading--configure-deployment-timeout\"><h3 id=\"heading--configure-deployment-timeout\">Configure deployment timeout</h3></a>\n\nBy default, when you deploy a machine, MAAS will consider the deployment a failure if it doesn't complete within 30 minutes.  You can configure this timeout, if you wish, with the command:\n\n```\nmaas $PROFILE maas set-config name=node-timeout value=$NUMBER_OF_MINUTES\n```\n\n<a href=\"#heading--enlisted-deployed-machines\"><h3 id=\"heading--enlisted-deployed-machines\">How to enlist a machine that\u2019s already running a workload</h3></a>\n\nIn order to add machine that\u2019s already running a workload, there are currently two options:\n\nVia the API/CLI, you can create a machine, passing the deployed flag:\n\n```\n$ maas $profile machines create deployed=true hostname=mymachine \\   \narchitecture=amd64 mac_addresses=00:16:3e:df:35:bb power_type=manual\n```\n\nOn the machine itself (the recommended way, if the machine is running Ubuntu), you can download a helper script from MAAS and create the machine that way:\n\n```\n$ wget http://$MAAS_IP:5240/MAAS/maas-run-scripts\n$ chmod 755 maas-run-scripts\n$ ./maas-run-scripts register-machine --hostname mymachine \\\n > http://$MAAS_IP:5240/MAAS $MAAS_API_TOKEN\n```\n\nNow you have a machine in MAAS that\u2019s in the deployed state, with no hardware information yet.\n\n<a href=\"#heading--update-deployed-hw-info\"><h3 id=\"heading--update-deployed-hw-info\">How to update hardware information for a deployed machine</h3></a>\n\nThe recommended way of updating the hardware information for a deployed machine is to download the maas-run-scripts script and run it on the machine itself:\n\n```\n$ wget http://$MAAS_IP:5240/MAAS/maas-run-scripts\n$ chmod 755 maas-run-scripts\n$ ./maas-run-scripts report-results --config mymachine-creds.yaml\n```\n\nIf you created the machine with the maas-run-scripts, you should have such a mymachine-creds.yaml file already. If not, it should look like this:\n\n```\nreporting:\n          maas:\n            consumer_key: $CONSUMER_KEY\n            endpoint: http://$MAAS_IP:5240/MAAS/metadata/status/$SYSTEM_ID\n            token_key: $TOKEN_KEY\n            token_secret: $TOKEN_SECRET\n```\n\nYou may get the needed credentials from the MAAS API, for example:\n\n```\n$ maas $profile machine get-token wxwwga\nSuccess.\nMachine-readable output follows:\n{\n        \"token_key\": \"Lyy9BS4tKsQakDQScy\",\n        \"token_secret\": \"V8vta8Azwn6FZVkfHnuTvLGLScAvEufB\",\n        \"consumer_key\": \"YGT6QKSH65aap4tGnw\"\n}\n```\n\n\n<!-- comment -->\n"}